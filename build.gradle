plugins {
	id("com.github.johnrengelman.shadow") version "8.1.1"
	id("io.micronaut.application") version "4.4.2"
	id("io.micronaut.aot") version "4.4.2"
	id("com.diffplug.spotless") version '6.25.0'
}

version = "0.1.1"
group = "com.anasdidi.edumgmt"

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor("io.micronaut.data:micronaut-data-processor")
	annotationProcessor("io.micronaut:micronaut-http-validation")
	annotationProcessor("io.micronaut.openapi:micronaut-openapi")
	annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
	implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
	implementation("io.micronaut.liquibase:micronaut-liquibase")
	implementation("io.micronaut.serde:micronaut-serde-jackson")
	implementation("io.micronaut.sql:micronaut-jdbc-hikari")
	compileOnly("io.micronaut:micronaut-http-client")
	compileOnly("io.micronaut.openapi:micronaut-openapi-annotations")
	runtimeOnly("ch.qos.logback:logback-classic")
	runtimeOnly("com.h2database:h2")
	runtimeOnly("org.yaml:snakeyaml")
	testImplementation("io.micronaut:micronaut-http-client")
	testImplementation("org.junit.jupiter:junit-jupiter-params")
}


application {
	mainClass = "com.anasdidi.edumgmt.Application"
}
java {
	sourceCompatibility = JavaVersion.toVersion("21")
	targetCompatibility = JavaVersion.toVersion("21")
}


graalvmNative.toolchainDetection = false

micronaut {
	runtime("netty")
	testRuntime("junit5")
	processing {
		incremental(true)
		annotations("com.anasdidi.edumgmt.*")
	}
	aot {
		// Please review carefully the optimizations enabled below
		// Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
		optimizeServiceLoading = false
		convertYamlToJava = false
		precomputeOperations = true
		cacheEnvironment = true
		optimizeClassLoading = true
		deduceEnvironment = true
		optimizeNetty = true
		replaceLogbackXml = true
	}
}


tasks.named("dockerfileNative") {
	jdkVersion = "21"
}

spotless {
	format 'misc', {
		target '.gitattributes', '.gitignore'
		trimTrailingWhitespace()
		indentWithSpaces(2)
		endWithNewline()
	}
	java {
		importOrder()
		removeUnusedImports()
		cleanthat()
		googleJavaFormat()
		formatAnnotations()
		licenseHeader '/* (C) $YEAR Anas Juwaidi Bin Mohd Jeffry. All rights reserved. */'
	}
	groovyGradle {
		target '*.gradle' // default target of groovyGradle
		greclipse()
	}
}

test {
	testLogging {
		events "passed", "skipped", "failed" //, "standardOut", "standardError"

		showExceptions true
		exceptionFormat "full"
		showCauses true
		showStackTraces true

		showStandardStreams = false
	}
}
